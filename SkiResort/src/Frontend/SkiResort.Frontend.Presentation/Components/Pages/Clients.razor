@page "/clients"
@using System.Net.Http.Json
@inject IHttpApiClientFactory HttpApiClientFactory

<h3>Clients</h3>

@if (clients == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th @onclick="() => ApplySorting(nameof(ClientDto.FirstName))">First Name</th>
                <th @onclick="() => ApplySorting(nameof(ClientDto.LastName))">Last Name</th>
                <th @onclick="() => ApplySorting(nameof(ClientDto.Email))">Email</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var client in clients)
            {
                <tr>
                    <td>@client.FirstName</td>
                    <td>@client.LastName</td>
                    <td>@client.Email</td>
                </tr>
            }
        </tbody>
    </table>
    @if (pageIndex != 1)
    {
        <div class="d-flex justify-content-center align-items-center mt-3">
            <button class="btn btn-primary btn-lg m-2" @onclick="LoadPrevious">
                <i class="fas fa-chevron-left"></i>
            </button>

            <span class="mx-3">@pageIndex</span>

            <button class="btn btn-primary btn-lg m-2" @onclick="LoadNext">
                <i class="fas fa-chevron-right"></i>
            </button>
        </div>
    }
    else
    {
        @if (clients.Count() == pageSize)
        {
            <div class="d-flex justify-content-center align-items-center mt-3">
                <button class="btn btn-primary btn-lg m-2" @onclick="LoadPrevious">
                    <i class="fas fa-chevron-left"></i>
                </button>

                <span class="mx-3">@pageIndex</span>

                <button class="btn btn-primary btn-lg m-2" @onclick="LoadNext">
                    <i class="fas fa-chevron-right"></i>
                </button>
            </div>
        }
    }

}

@code {
    private SkiResortApiClient skiResortApiClient;
    private List<ClientDto> clients;
    private int pageIndex = 1;
    private int pageSize = 10;
    private string currentSortColumn = nameof(ClientDto.Id);
    private bool isAscending = true;

    protected override async Task OnInitializedAsync()
    {
        skiResortApiClient = await HttpApiClientFactory.GetSkiResortApiHttpClientAsync();
        clients = await LoadData(pageIndex, pageSize);
    }

    private async Task<List<ClientDto>> LoadData(int pageIndex, int pageSize)
    {
        var req = new PaginationSortingRequest
            {
                PageIndex = pageIndex,
                PageSize = pageSize,
                SortBy = currentSortColumn,
                Ascending = isAscending
            };

        return (await skiResortApiClient!.ClientGetPaginatedSortedAsync(req)).ToList();
    }

    private async Task LoadNext()
    {
        var res = await LoadData(pageIndex + 1, pageSize);
        if (res is null || res.Count() == 0)
        {
            return;
        }
        pageIndex++;
        clients = res;
    }

    private async Task LoadPrevious()
    {
        if (pageIndex > 1)
        {
            pageIndex--;
            clients = await LoadData(pageIndex, pageSize);
        }
    }

    private async Task ApplySorting(string columnName)
    {
        if (currentSortColumn == columnName)
        {
            isAscending = !isAscending;
        }
        else
        {
            currentSortColumn = columnName;
            isAscending = true;
        }

        clients = await LoadData(pageIndex, pageSize);
    }
}