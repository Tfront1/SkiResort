@page "/clients"
@using System.Net.Http.Json
@inject IHttpApiClientFactory HttpApiClientFactory

<h3>Clients</h3>

@if (clients == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <input type="text" placeholder="Search..." @bind="req.Filter" @bind:event="oninput" @onkeyup="ApplyFilter" />
    <table class="table">
        <thead>
            <tr>
                <th @onclick="() => ApplySorting(nameof(ClientDto.FirstName))">First Name</th>
                <th @onclick="() => ApplySorting(nameof(ClientDto.LastName))">Last Name</th>
                <th @onclick="() => ApplySorting(nameof(ClientDto.Email))">Email</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var client in clients)
            {
                <tr>
                    <td>@client.FirstName</td>
                    <td>@client.LastName</td>
                    <td>@client.Email</td>
                </tr>
            }
        </tbody>
    </table>
    @if (req.PageIndex != 1)
    {
        <div class="d-flex justify-content-center align-items-center mt-3">
            <button class="btn btn-primary btn-lg m-2" @onclick="LoadPrevious">
                <i class="fas fa-chevron-left"></i>
            </button>

            <span class="mx-3">@req.PageIndex</span>

            <button class="btn btn-primary btn-lg m-2" @onclick="LoadNext">
                <i class="fas fa-chevron-right"></i>
            </button>
        </div>
    }
    else
    {
        @if (clients.Count() == req.PageSize)
        {
            <div class="d-flex justify-content-center align-items-center mt-3">
                <button class="btn btn-primary btn-lg m-2" @onclick="LoadPrevious">
                    <i class="fas fa-chevron-left"></i>
                </button>

                <span class="mx-3">@req.PageIndex</span>

                <button class="btn btn-primary btn-lg m-2" @onclick="LoadNext">
                    <i class="fas fa-chevron-right"></i>
                </button>
            </div>
        }
    }
}

@code {
    private SkiResortApiClient? skiResortApiClient;
    private List<ClientDto>? clients;

    private PaginationSortingRequest req = new PaginationSortingRequest
        {
            PageIndex = 1,
            PageSize = 10,
            SortBy = nameof(ClientDto.Id),
            Ascending = true,
            Filter = "",
        };

    protected override async Task OnInitializedAsync()
    {
        skiResortApiClient = await HttpApiClientFactory.GetSkiResortApiHttpClientAsync();
        clients = await LoadData(req);
    }

    private async Task<List<ClientDto>> LoadData(PaginationSortingRequest req)
    {
        return (await skiResortApiClient!.ClientGetPaginatedSortedAsync(req)).ToList();
    }

    private async Task LoadNext()
    {
        PaginationSortingRequest reqTemp = new PaginationSortingRequest
        {
            PageIndex = req.PageIndex + 1,
            PageSize = req.PageSize,
            SortBy = req.SortBy,
            Ascending = req.Ascending,
            Filter = req.Filter,
        };

        var res = await LoadData(reqTemp);

        if (res is null || res.Count() == 0)
        {
            return;
        }

        req.PageIndex++;
        clients = res;
    }

    private async Task LoadPrevious()
    {
        if (req.PageIndex > 1)
        {
            req.PageIndex--;
            clients = await LoadData(req);
        }
    }

    private async Task ApplySorting(string columnName)
    {
        if (req.SortBy == columnName)
        {
            req.Ascending = !req.Ascending;
        }
        else
        {
            req.SortBy = columnName;
            req.Ascending = true;
        }

        clients = await LoadData(req);
    }

    private async Task ApplyFilter(KeyboardEventArgs args)
    {
        req.PageIndex = 1;
        clients = await LoadData(req);
    }
}