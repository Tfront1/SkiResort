@page "/clientEventCounts"
@using System.Net.Http.Json
@using System.Text.Json
@using System.Xml.Serialization
@using System.Text
@using Mapster
@using SkiResort.Frontend.Presentation.Services
@inject IHttpApiClientFactory HttpApiClientFactory
@inject IJSRuntime JsInterop
@inject NavigationManager NavigationManager
@inject SessionStorageAccessor _sessionStorage;

<h3>ClientEventCountModels</h3>

@if (clientEventCounts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="export-buttons">
        <button class="btn btn-success" style="margin-left: 3px;" @onclick="ExportAsCsv">CSV</button>
        <button class="btn btn-info" style="margin-left: 3px;" @onclick="ExportAsXml">XML</button>
        <button class="btn btn-warning" style="margin-left: 3px;" @onclick="ExportAsJson">JSON</button>
        <button class="btn btn-success" style="margin-left: 30px;" @onclick="ViewChart">Chart</button>
    </div>

    <table class="table">
        <thead>
            <tr>
                <th>Client Id</th>
                <th>First Name</th>
                <th>Count of Events</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var clientEventCount in clientEventCounts)
            {
                <tr>
                    <td>@clientEventCount.ClientId</td>
                    <td>@clientEventCount.FirstName</td>
                    <td>@clientEventCount.CountOfEvents</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private SkiResortApiClient? skiResortApiClient;
    private List<ClientEventCountModel>? clientEventCounts;
    public string name = default;
    public string role = default;


    protected override async Task OnInitializedAsync()
    {
        try
        {
            name = await _sessionStorage.GetValueAsync<string?>("name");
            role = await _sessionStorage.GetValueAsync<string?>("role");
            skiResortApiClient = await HttpApiClientFactory.GetSkiResortApiHttpClientAsync();
            await skiResortApiClient.UserLogAsync(new UserLogModel()
                {
                    UserName = name,
                    Page = "/clientEventCounts"
                });
            clientEventCounts = await LoadData();
        }
        catch (Exception ex) { };
    }

    private async Task<List<ClientEventCountModel>> LoadData()
    {
        return (await skiResortApiClient!.ClientEventCountGetAllAsync()).ToList();
    }

    private async Task ViewChart()
    {
        NavigationManager.NavigateTo($"/clientEventChart", true);
    }

    private async Task ExportAsCsv()
    {
        var csvData = GenerateCsv(clientEventCounts);
        await SaveAsFile("clientEventCounts.csv", csvData);
    }

    private async Task ExportAsXml()
    {
        var xmlData = GenerateXml(clientEventCounts);
        await SaveAsFile("clientEventCounts.xml", xmlData);
    }

    private async Task ExportAsJson()
    {
        var jsonData = JsonSerializer.Serialize(clientEventCounts);
        await SaveAsFile("clientEventCounts.json", jsonData);
    }

    private string GenerateCsv(List<ClientEventCountModel> clientEventCounts)
    {
        var stringBuilder = new StringBuilder();
        stringBuilder.AppendLine("ClientId,FirstName,CountOfEvent");

        foreach (var clientEventCount in clientEventCounts)
        {
            stringBuilder.AppendLine($"{clientEventCount.ClientId},{clientEventCount.FirstName},{clientEventCount.CountOfEvents}");
        }

        return stringBuilder.ToString();
    }

    private string GenerateXml(List<ClientEventCountModel> clientEventCounts)
    {
        var xmlSerializer = new XmlSerializer(typeof(List<ClientEventCountModel>));
        using var stringWriter = new StringWriter();
        xmlSerializer.Serialize(stringWriter, clientEventCounts);
        return stringWriter.ToString();
    }

    private async Task SaveAsFile(string filename, string data)
    {
        await JsInterop.InvokeVoidAsync("saveAsFile", filename, data);
    }
}