@page "/login"
@using SkiResort.Frontend.Presentation.Services
@inject NavigationManager NavigationManager
@inject IHttpApiClientFactory HttpApiClientFactory
@inject SessionStorageAccessor _sessionStorage;
<h3>Login</h3>

<EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="username" class="form-label">Username</label>
        <InputText id="username" class="form-control" @bind-Value="@loginModel.Username" />
    </div>

    <div class="mb-3">
        <label for="password" class="form-label">Password</label>
        <InputText id="password" type="password" class="form-control" @bind-Value="@loginModel.Password" />
    </div>

    <button type="submit" class="btn btn-primary">Login</button>
</EditForm>

@if (loginResponse != null && !string.IsNullOrEmpty(loginResponse.Role))
{
    <div class="alert alert-success">
        Welcome, @loginResponse.UserName. Your role is @loginResponse.Role.
    </div>
}
else if (attemptedSubmit)
{
    <div class="alert alert-danger">
        Invalid username or password.
    </div>
}

@code {
    private SkiResortApiClient? skiResortApiClient;

    private LoginModel loginModel = new LoginModel();
    private LoginResponse loginResponse;
    private bool attemptedSubmit = false;

    protected override async Task OnInitializedAsync()
    {
        skiResortApiClient = await HttpApiClientFactory.GetSkiResortApiHttpClientAsync();

    }
    private async Task HandleLogin()
    {
        var response = await skiResortApiClient!.LoginAsync(loginModel);

        if (response.UserName is not null)
        {
            _sessionStorage.SetValueAsync("name", response.UserName);
            _sessionStorage.SetValueAsync("role", response.Role);
            NavigationManager.NavigateTo("/", true);
        }
        else
        {
            loginResponse = new LoginResponse();
            attemptedSubmit = true;
        }
    }
}
