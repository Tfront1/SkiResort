@page "/databaseLogs"
@using System.Net.Http.Json
@using System.Text.Json
@using System.Xml.Serialization
@using System.Text
@using SkiResort.Frontend.Presentation.Services
@inject IHttpApiClientFactory HttpApiClientFactory
@inject IJSRuntime JsInterop
@inject NavigationManager NavigationManager
@inject SessionStorageAccessor _sessionStorage;

<h3>DatabaseLogs</h3>

@if (databaseLogs == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="export-buttons">
        <input type="text" placeholder="Search..." @bind="req.Filter" @bind:event="oninput" @onkeyup="ApplyFilter" />
        <button class="btn btn-success" style="margin-left: 3px;" @onclick="ExportAsCsv">CSV</button>
        <button class="btn btn-info" style="margin-left: 3px;" @onclick="ExportAsXml">XML</button>
        <button class="btn btn-warning" style="margin-left: 3px;" @onclick="ExportAsJson">JSON</button>
    </div>

    <table class="table">
        <thead>
            <tr>
                <th @onclick="() => ApplySorting(nameof(DatabaseLogModel.Id))">Id</th>
                <th @onclick="() => ApplySorting(nameof(DatabaseLogModel.EventDate))">Event Date</th>
                <th @onclick="() => ApplySorting(nameof(DatabaseLogModel.TableName))">Table Name</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var databaseLog in databaseLogs)
            {
                <tr>
                    <td>@databaseLog.Id</td>
                    <td>@databaseLog.EventDate</td>
                    <td>@databaseLog.TableName</td>
                </tr>
            }
        </tbody>
    </table>

    @if (req.PageIndex != 1)
    {
        <div class="d-flex justify-content-center align-items-center mt-3">
            <button class="btn btn-primary btn-lg m-2" @onclick="LoadPrevious">
                <i class="fas fa-chevron-left"></i>
            </button>

            <span class="mx-3">@req.PageIndex</span>

            <button class="btn btn-primary btn-lg m-2" @onclick="LoadNext">
                <i class="fas fa-chevron-right"></i>
            </button>
        </div>
    }
    else
    {
        @if (databaseLogs.Count() == req.PageSize)
        {
            <div class="d-flex justify-content-center align-items-center mt-3">
                <button class="btn btn-primary btn-lg m-2" @onclick="LoadPrevious">
                    <i class="fas fa-chevron-left"></i>
                </button>

                <span class="mx-3">@req.PageIndex</span>

                <button class="btn btn-primary btn-lg m-2" @onclick="LoadNext">
                    <i class="fas fa-chevron-right"></i>
                </button>
            </div>
        }
    }
}

@code {
    private SkiResortApiClient? skiResortApiClient;
    private DatabaseLogModel selectedDatabaseLog = new DatabaseLogModel();
    private List<DatabaseLogModel>? databaseLogs;
    public string name = default;
    public string role = default;

    private PaginationSortingRequest req = new PaginationSortingRequest
        {
            PageIndex = 1,
            PageSize = 10,
            SortBy = nameof(DatabaseLogModel.Id),
            Ascending = true,
            Filter = "",
        };

    protected override async Task OnInitializedAsync()
    {
        try
        {
            name = await _sessionStorage.GetValueAsync<string?>("name");
            role = await _sessionStorage.GetValueAsync<string?>("role");
            skiResortApiClient = await HttpApiClientFactory.GetSkiResortApiHttpClientAsync();
            databaseLogs = await LoadData(req);
            await skiResortApiClient.UserLogAsync(new UserLogModel()
                {
                    UserName = name,
                    Page = "/databaseLogs"
                });
        }
        catch (Exception ex) { };
    }

    private async Task<List<DatabaseLogModel>> LoadData(PaginationSortingRequest req)
    {
        return (await skiResortApiClient!.DatabaseLogGetPaginatedSortedAsync(req)).ToList();
    }

    private async Task LoadNext()
    {
        PaginationSortingRequest reqTemp = new PaginationSortingRequest
            {
                PageIndex = req.PageIndex + 1,
                PageSize = req.PageSize,
                SortBy = req.SortBy,
                Ascending = req.Ascending,
                Filter = req.Filter,
            };

        var res = await LoadData(reqTemp);

        if (res is null || res.Count() == 0)
        {
            return;
        }

        req.PageIndex++;
        databaseLogs = res;
    }

    private async Task LoadPrevious()
    {
        if (req.PageIndex > 1)
        {
            req.PageIndex--;
            databaseLogs = await LoadData(req);
        }
    }

    private async Task ApplySorting(string columnName)
    {
        if (req.SortBy == columnName)
        {
            req.Ascending = !req.Ascending;
        }
        else
        {
            req.SortBy = columnName;
            req.Ascending = true;
        }

        databaseLogs = await LoadData(req);
    }

    private async Task ApplyFilter(KeyboardEventArgs args)
    {
        req.PageIndex = 1;
        databaseLogs = await LoadData(req);
    }

    private async Task ExportAsCsv()
    {
        var csvData = GenerateCsv(databaseLogs);
        await SaveAsFile("databaseLogs.csv", csvData);
    }

    private async Task ExportAsXml()
    {
        var xmlData = GenerateXml(databaseLogs);
        await SaveAsFile("databaseLogs.xml", xmlData);
    }

    private async Task ExportAsJson()
    {
        var jsonData = JsonSerializer.Serialize(databaseLogs);
        await SaveAsFile("databaseLogs.json", jsonData);
    }

    private string GenerateCsv(List<DatabaseLogModel> databaseLogs)
    {
        var stringBuilder = new StringBuilder();
        stringBuilder.AppendLine("Id,EventDate,TableName");

        foreach (var databaseLog in databaseLogs)
        {
            stringBuilder.AppendLine($"{databaseLog.Id},{databaseLog.EventDate},{databaseLog.TableName}");
        }

        return stringBuilder.ToString();
    }

    private string GenerateXml(List<DatabaseLogModel> databaseLogs)
    {
        var xmlSerializer = new XmlSerializer(typeof(List<DatabaseLogModel>));
        using var stringWriter = new StringWriter();
        xmlSerializer.Serialize(stringWriter, databaseLogs);
        return stringWriter.ToString();
    }

    private async Task SaveAsFile(string filename, string data)
    {
        await JsInterop.InvokeVoidAsync("saveAsFile", filename, data);
    }
}